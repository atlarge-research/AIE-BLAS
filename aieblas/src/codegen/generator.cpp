#include <fstream>
#include "aieblas/detail/util.hpp"
#include "aieblas/detail/codegen/generator.hpp"

namespace aieblas {
namespace codegen {
static inline void generate_header(generator &gen,
                                   generator::comment_type comment_type) {
    const char *comment_start;
    switch (comment_type) {
    case generator::C_STYLE:
        comment_start = "// ";
        break;
    case generator::HASHTAG:
        comment_start = "# ";
        break;
    default:
        return;
    }

    time_t now = std::time(0);
    struct tm tstruct = *std::localtime(&now);

    gen.println("{}This file was auto-generated by aieblas on {}-{}-{} at "
                "{}:{}", comment_start, 1900 + tstruct.tm_year,
                1 + tstruct.tm_mon, tstruct.tm_mday, tstruct.tm_hour,
                tstruct.tm_min);
    gen.println();
}

void generator::open(fs::path filename, comment_type comment_type) {
    indent_ = 0;
    indented = false;
    if (cur_file_.is_open()) {
        this->close();
    }
    log(log_level::verbose, "Opening '{}'", filename.native());
    cur_file_ = std::ofstream{filename};
    cur_filename = filename;

    generate_header(*this, comment_type);
}

void generator::close() {
    log(log_level::verbose, "Closing '{}'", cur_filename.native());
    cur_file_.close();
}

void generator::print_indent() {
    std::print(cur_file_, "{}", std::string(indent_ * indent_level, ' '));
    indented = true;
}
} // codegen
} // aieblas
