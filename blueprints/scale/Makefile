PLATFORM := /opt/xilinx/platforms/xilinx_vck5000_gen4x8_qdma_2_202220_1/xilinx_vck5000_gen4x8_qdma_2_202220_1.xpfm

# Makefile input options
TARGET := hw
PFM := tutorial

# File names and locations
GRAPH := aie/graph.cpp aie/graph.h
GRAPH_O := libadf.a

KERNEL := s2mm.cpp mm2s.cpp
KERNEL_XO := s2mm.xo mm2s.xo
CONFIG_FILE := link.cfg


# Command-line options
VPP := v++
AIECC := aiecompiler
AIESIM := aiesimulator
X86SIM := x86simulator

AIE_INCLUDE_FLAGS := -include="$(XILINX_VITIS)/aietools/include" -include="./aie" -include="./data" -include="./aie/kernels" -include="./"
AIE_FLAGS := $(AIE_INCLUDE_FLAGS) --platform $(PLATFORM) -workdir=./Work -v --pl-freq=500  -log-level=3 --output=graph.json

AIE_SIM_CMD = aiesimulator --pkg-dir=./Work --dump-vcd foo --profile


ifeq ($(TARGET),sw_emu)
	AIE_FLAGS += --target=x86sim
else
	AIE_FLAGS += --target=hw
endif

VPP_XO_FLAGS := -c --platform $(PLATFORM) -t $(TARGET) --save-temps -j 8 -g
VPP_LINK_FLAGS := -l -t $(TARGET) --platform $(PLATFORM) $(KERNEL_XO) $(GRAPH_O)  --save-temps -g --config $(CONFIG_FILE) -j 8 -o $(PFM).xsa
VPP_FLAGS := $(VPP_LINK_FLAGS)

GCC_FLAGS := -Wall\
	     -std=c++17 \
	     -Wno-int-to-pointer-cast \
	     -c

		#  --sysroot=${SDKTARGETSYSROOT}

ifeq ($(TARGET),sw_emu)
	GCC_FLAGS += -D__SYNCBO_ENABLE__ -D__PS_ENABLE_AIE__
endif

GCC_INCLUDES := -I$(XILINX_XRT)/include \
			-I$(XILINX_VIVADO)/include/ \
			-I./ -I../aie \
			-I${XILINX_VITIS}/aietools/include \
			-I${XILINX_VITIS}/include

ifeq ($(TARGET),sw_emu)
	GCC_LIB := -ladf_api_xrt -lxrt_coreutil  -L$(XILINX_XRT)/lib/ -L${XILINX_VITIS}/aietools/lib/lnx64.o/
else
	GCC_LIB := -lxaiengine -ladf_api_xrt -lxrt_core -lxrt_coreutil
endif

LDCLFLAGS := $(GCC_LIB)

.ONESHELL:
.PHONY: clean all all_dfx kernels aie sim xsa host package run_emu


all: aie kernels xsa host package

######################################################
# This step compiles the HLS C kernels and creates an ADF Graph
# the %.xo is used as the output and creates from the %.cpp files
# The graph for hardware is generated by having the -TARGET=hw

kernels: $(KERNEL_XO)
	@echo "COMPLETE: Kernels Created."

%.xo: pl_kernels/%.cpp
	$(VPP) $(VPP_XO_FLAGS) -k $(basename $(notdir $<)) $< -o $@

aie: $(GRAPH_O) $(GRAPH)

#AIE or X86 Simulation
sim: $(GRAPH_O)

ifeq ($(TARGET),sw_emu)
	$(X86SIM) --pkg-dir=./Work
	@echo "INFO: Comparing Results..."
	@diff -w data/golden.txt x86simulator_output/data/output.txt && echo "X86 succeeded!"|| (echo "X86Sim failed $$?"; exit 1)
else
	$(AIESIM) --profile --dump-vcd=tutorial --pkg-dir=./Work
endif

#AIE or X86 compilation
$(GRAPH_O): $(GRAPH)
	$(AIECC) $(AIE_FLAGS) $(GRAPH)
	@echo "COMPLETE: libadf.a created."
#####################################################

########################################################
# Once the kernels and graph are generated, you can build
# the hardware part of the design. This creates an xsa
# that will be used to run the design on the platform.
xsa: $(GRAPH_O) $(KERNEL_XO)
	$(VPP) $(VPP_LINK_FLAGS) || (echo "task: [xsa] failed error code: $$?"; exit 1)
########################################################

############################################################################################################################
# For sw emulation, hw emulation and hardware, compile the PS code and generate the host.exe. This is needed for creating the sd_card.
host:
	cd ./sw
	$(CXX) $(GCC_FLAGS) $(GCC_INCLUDES) -o host.o host.cpp
	$(CXX) *.o -Wall -L$(XILINX_XRT)/lib/ -lxrt_core -lxrt_coreutil -std=c++17 -o host.exe
############################################################################################################################

package:
	cd ./sw
	v++ -p -t ${TARGET} \
		-f ${PLATFORM} \
		--package.boot_mode=ospi ../tutorial.xsa ../libadf.a -o a.xclbin

clean:
	rm -rf _x v++* $(KERNEL_XO) $(GRAPH_O) *.o *.compile_summary* *.xpe xnwOut *.xclbin* *.log *.xsa Work *.db *.csv *$(PFM)* *.jou .Xil
	rm -rf sw/*.log sw/*.xclbin sw/cfg/ sw/launch_hw_emu.sh sw/qemu_dts_files sw/emu_qemu_scripts sw/*.exe sw/_x/ sw/*summary sw/*.o sw/*.elf sw/*.xpe sw/xnwOut sw/Work sw/*.csv sw/*.db sw/*.bin sw/*.BIN sw/*.bif sw/launch_hw_emulator.sh sw/*.txt sw/emulation sw/.Xil ./x86simulator_output
	rm -rf sw/sd_card sw/sd_card.img sw/*.o ./*.exe sw/qeumu* x86simulator_output/ aiesimulator_output/

clean_for_x86:
	rm -rf sw/*.log sw/*.xclbin sw/cfg/ sw/launch_hw_emu.sh sw/qemu_dts_files sw/emu_qemu_scripts sw/*.exe sw/_x/ sw/*summary sw/*.o sw/*.elf sw/*.xpe sw/xnwOut sw/Work sw/*.csv sw/*.db sw/*.bin sw/*.BIN sw/*.bif sw/launch_hw_emulator.sh sw/*.txt sw/emulation sw/.Xil
	rm -rf sw/sd_card sw/sd_card.img sw/*.o sw/*.exe sw/qemu* sw/launch_sw_*

